# -*- coding: utf-8 -*-
"""LOGISTIC REGRESSION.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WQZH5u6XwP7Df79bYvkZSfN0fscCSSK5
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, roc_curve, classification_report, confusion_matrix

train_df = pd.read_csv("Titanic_train.csv")
test_df = pd.read_csv("Titanic_test.csv")
train_df.head()

train_df.info()
train_df.describe()
train_df.isnull().sum()

sns.countplot(x='Survived', data=train_df)
plt.title("Survival Distribution")
plt.show()
sns.countplot(x='Pclass', hue='Survived', data=train_df)
plt.title("Pclass vs Survival")
plt.show()
sns.histplot(train_df['Age'].dropna(), bins=30, kde=True)
plt.title("Age Distribution")
plt.show()
sns.boxplot(x='Survived', y='Age', data=train_df)

train_df['Age'] = train_df['Age'].fillna(train_df['Age'].median())
train_df['Embarked'] = train_df['Embarked'].fillna(train_df['Embarked'].mode()[0])

test_df['Age'] = test_df['Age'].fillna(test_df['Age'].median())
test_df['Fare'] = test_df['Fare'].fillna(test_df['Fare'].median())
test_df['Embarked'] = test_df['Embarked'].fillna(test_df['Embarked'].mode()[0])

train_df = train_df.drop(['Name', 'Ticket', 'Cabin', 'PassengerId'], axis=1)
test_passenger_ids = test_df['PassengerId']
test_df = test_df.drop(['Name', 'Ticket', 'Cabin', 'PassengerId'], axis=1)

columns_to_drop = ['Name', 'Ticket', 'Cabin', 'PassengerId']
train_df = train_df.drop(columns=[col for col in columns_to_drop if col in train_df.columns])
test_passenger_ids = test_df['PassengerId'] if 'PassengerId' in test_df.columns else None
test_df = test_df.drop(columns=[col for col in columns_to_drop if col in test_df.columns])

label = LabelEncoder()
for col in ['Sex', 'Embarked']:
    train_df[col] = label.fit_transform(train_df[col])
    test_df[col] = label.transform(test_df[col])

X = train_df.drop('Survived', axis=1)
y = train_df['Survived']
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)
model = LogisticRegression(max_iter=200)
model.fit(X_train, y_train)

y_pred = model.predict(X_val)
y_prob = model.predict_proba(X_val)[:,1]
print("Accuracy:", accuracy_score(y_val, y_pred))
print("Precision:", precision_score(y_val, y_pred))
print("Recall:", recall_score(y_val, y_pred))
print("F1 Score:", f1_score(y_val, y_pred))
print("ROC-AUC Score:", roc_auc_score(y_val, y_prob))
sns.heatmap(confusion_matrix(y_val, y_pred), annot=True, fmt='d')
plt.title("Confusion Matrix")
plt.show()

fpr, tpr, _ = roc_curve(y_val, y_prob)
plt.plot(fpr, tpr, label='ROC Curve (area = %0.2f)' % roc_auc_score(y_val, y_prob))
plt.plot([0, 1], [0, 1], 'k--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic')
plt.legend()
plt.show()

coefficients = pd.DataFrame(model.coef_[0], index=X.columns, columns=['Coefficient'])
print(coefficients.sort_values(by='Coefficient', ascending=False))

#Interview Questions
#Q1.Difference between Precision and Recall?
#Precision = TP / (TP + FP): how many predicted positives are correct.
#Recall = TP / (TP + FN): how many actual positives were predicted.


#Q2.What is Cross-Validation in binary classification?
#It splits data into k folds to ensure model generalizes well.
#Important for estimating model performance without overfitting.

!pip install streamlit

import joblib
joblib.dump(model, 'logistic_model.pkl')

import streamlit as st
import joblib
import numpy as np

model = joblib.load("logistic_model.pkl")

st.title("Titanic Survival Prediction")

pclass = st.selectbox("Passenger Class (Pclass)", [1, 2, 3])
sex = st.selectbox("Sex", ['male', 'female'])
age = st.slider("Age", 0, 100, 25)
sibsp = st.number_input("Siblings/Spouses Aboard (SibSp)", 0, 10, 0)
parch = st.number_input("Parents/Children Aboard (Parch)", 0, 10, 0)
fare = st.number_input("Fare", 0.0, 500.0, 50.0)
embarked = st.selectbox("Port of Embarkation", ['C', 'Q', 'S'])

# Encoding
sex = 0 if sex == 'male' else 1
embarked_dict = {'C': 0, 'Q': 1, 'S': 2}
embarked = embarked_dict[embarked]

input_data = np.array([[pclass, sex, age, sibsp, parch, fare, embarked]])
prediction = model.predict(input_data)

if st.button("Predict"):
    st.success("Survived" if prediction[0] == 1 else "Did not survive")

